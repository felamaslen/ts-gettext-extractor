name: Build

on:
  push:
    branches:
      - main

jobs:
  build-binary:
    name: Build binary
    permissions: 
      contents: read
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64-gnu,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: x86_64-unknown-linux-gnu,
            }
          - {
              NAME: linux-arm64-gnu,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: aarch64-unknown-linux-gnu,
            }
          - {
              NAME: linux-x64-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: x86_64-unknown-linux-musl,
            }
          - {
              NAME: linux-arm64-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: aarch64-unknown-linux-musl,
            }
          # - {
          #     NAME: win32-x64-msvc,
          #     OS: windows-2022,
          #     TOOLCHAIN: stable,
          #     TARGET: x86_64-pc-windows-msvc,
          #   }
          # - {
          #     NAME: win32-arm64-msvc,
          #     OS: windows-2022,
          #     TOOLCHAIN: stable,
          #     TARGET: aarch64-pc-windows-msvc,
          #   }
          - {
              NAME: darwin-x64,
              OS: macos-12,
              TOOLCHAIN: stable,
              TARGET: x86_64-apple-darwin,
            }
          - {
              NAME: darwin-arm64,
              OS: macos-12,
              TOOLCHAIN: stable,
              TARGET: aarch64-apple-darwin,
            }
    env:
      NAME: ${{ matrix.build.NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.build.NAME }}" = *"-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              --allow-unauthenticated musl-tools
          fi
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.build.TOOLCHAIN }}
          target: ${{ matrix.build.TARGET }}
          override: true
      - name: Build (linux/macos)
        if: matrix.build.OS != 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --locked --target ${{ matrix.build.TARGET }}
      - name: Build (windows)
        if: matrix.build.OS == 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target ${{ matrix.build.TARGET }} # --no-default-features
